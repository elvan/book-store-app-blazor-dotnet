@page "/users/register"
@inject IClient httpClient
@inject NavigationManager navManager

<h3>Register New Account</h3>

@if(string.IsNullOrEmpty(message) == false)
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}
<div>
    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Email" />
            <ValidationMessage For="@(() => RegistrationModel.Email)" />
        </div>
        <br/>
        <div class="form-group">
            <label for="email">First Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.FirstName" />
            <ValidationMessage For="@(() => RegistrationModel.FirstName)" />
        </div>
        <br/>
        <div class="form-group">
            <label for="email">Last Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.LastName" />
            <ValidationMessage For="@(() => RegistrationModel.LastName)" />
        </div>
        <br/>
        <div class="form-group">
            <label for="email">Password</label>
            <InputText class="form-control" type="password" @bind-Value="RegistrationModel.Password" />
            <ValidationMessage For="@(() => RegistrationModel.Password)" />
        </div>
        <br/>
        <button type="submit" class="btn btn-primary btn-block">Register</button>

        
    </EditForm>
</div>

@code {
    UserDto RegistrationModel = new UserDto
    {
        Role = "User"
    };
    string message = string.Empty;
    private async Task HandleRegistration()
    {
        try
        {
            await httpClient.RegisterAsync(RegistrationModel);
            NavigateToLogin();
        } 
        catch(ApiException ex)
        {
            if(ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                NavigateToLogin();
            }

            message = ex.Response;
        }   
    }


    private void NavigateToLogin(){
        navManager.NavigateTo("/users/login");
    }
}
