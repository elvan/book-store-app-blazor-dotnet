@inject IBookService bookService
@inject IJSRuntime js

<table class="table table-responsive">
    <thead>
        <tr>
            <th></th>
            <th>Title</th>
            <th>Price</th>
            <th>Author Name</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        <Virtualize ItemsProvider="LoadBooks" Context="book">
            <tr>
                <td>
                    <img src="@book.Image" width="100" height="100" alt="@book.Title" />
                </td>
                <td>@book.Title</td>
                <td>@book.Price.ToString("C")</td>
                <td><a class="btn btn-link" href="/authors/details/@book.AuthorId">@book.AuthorName </a></td>
                <td>
                    <a class="btn btn-primary" href="/books/details/@book.Id"> <span class="oi oi-book" aria-hidden="true"></span> Details </a>
                    <AuthorizeView Roles="Administrator">
                        <a class="btn btn-warning" href="/books/update/@book.Id"> <span class="oi oi-pencil" aria-hidden="true"></span> Edit </a>
                        <button class="btn btn-danger" @onclick=@(async () => await Delete(@book.Id))> <span class="oi oi-delete" aria-hidden="true"></span> Delete </button>
                    </AuthorizeView>
                </td>
            </tr>
        </Virtualize>
    </tbody>
</table>

@code {
    [Parameter]
    public List<BookReadOnlyDto> Books { get; set; }

    [Parameter]
    public int TotalSize { get; set; }

    [Parameter]
    public EventCallback<QueryParameters> OnScroll { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    private async ValueTask<ItemsProviderResult<BookReadOnlyDto>> LoadBooks(ItemsProviderRequest request)
    {
        var bookNum = Math.Min(request.Count, TotalSize - request.StartIndex);
        await OnScroll.InvokeAsync(new QueryParameters
        {
            StartIndex = request.StartIndex,
            PageSize = bookNum == 0 ? request.Count : bookNum
        });
        return new ItemsProviderResult<BookReadOnlyDto>(Books, TotalSize);
    }

    private async ValueTask<ItemsProviderResult<int>> Delete(int bookId)
    {
        await OnDelete.InvokeAsync(bookId);
        return new ItemsProviderResult<int>(null, bookId);
    }
}

